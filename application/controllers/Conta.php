<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Conta extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Conta_model');

        //$this->output->enable_profiler(TRUE);

    } 

    /*
     * Listing of conta
     */
    function index()
    {
        $data['conta'] = $this->Conta_model->get_all_conta();
        
        $data['_view'] = 'conta/index';
        $this->load->view('layouts/main',$data);
    }

    /**
     * Exibe o extrato/histórico da conta (empréstimos representam saídas e pagamentos representam entradas)
     * TODO: Futuramente cada pagamento e empréstimo deverá ser associado a uma conta, porém no momento apenas
     * a conta 1 (default do sistema) estará sendo debitada e creditada (essa feature será implementada de forma
     * completa na próxima entrega)
     */
    function history($conta) {

        $data['conta'] = $this->Conta_model->get_conta($conta);
        $data['historico'] = $this->Conta_model->get_history_conta($conta);

        $data['_view'] = 'conta/history';
        $this->load->view('layouts/main',$data);

    }

    /*
     * Adding a new conta
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('Descricao_Conta','Descricao Conta','required');
		$this->form_validation->set_rules('Saldo_Conta','Saldo Conta','required|numeric');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'Status_Conta' => $this->input->post('Status_Conta'),
				'Descricao_Conta' => $this->input->post('Descricao_Conta'),
				'Saldo_Conta' => $this->input->post('Saldo_Conta'),
            );
            
            $conta_id = $this->Conta_model->add_conta($params);
            redirect('conta/index');
        }
        else
        {            
            $data['_view'] = 'conta/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a conta
     */
    function edit($ID_Conta)
    {   
        // check if the conta exists before trying to edit it
        $data['conta'] = $this->Conta_model->get_conta($ID_Conta);
        
        if(isset($data['conta']['ID_Conta']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('Descricao_Conta','Descricao Conta','required');
			$this->form_validation->set_rules('Saldo_Conta','Saldo Conta','required|numeric');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'Status_Conta' => $this->input->post('Status_Conta'),
					'Descricao_Conta' => $this->input->post('Descricao_Conta'),
					'Saldo_Conta' => $this->input->post('Saldo_Conta'),
                );

                $this->Conta_model->update_conta($ID_Conta,$params);            
                redirect('conta/index');
            }
            else
            {
                $data['_view'] = 'conta/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('A conta que você está tentando acessar não existe.');
    } 

    /*
     * Deleting conta
     */
    function remove($ID_Conta)
    {
        $conta = $this->Conta_model->get_conta($ID_Conta);

        // check if the conta exists before trying to delete it
        if(isset($conta['ID_Conta']))
        {
            $this->Conta_model->delete_conta($ID_Conta);
            redirect('conta/index');
        }
        else
            show_error('A conta que você está tentando deletar não existe.');
    }
    
}
