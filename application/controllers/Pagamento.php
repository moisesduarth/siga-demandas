<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Pagamento extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Pagamento_model');
        $this->load->model('Observacao_emprestimo_model');

        //$this->output->enable_profiler(TRUE);

    } 

    function filtrar($page = 'index') {

        //Este método apenas irá definir como filtro todos os campos que foram postados e redirecionar para a página desejada        
        $filtro = $_POST;

        $this->session->set_flashdata('filtro', $filtro);
        redirect('pagamento/'.$page);

    }

    function listar_filtros($filtro = array()) {

        $filtro = array_filter($filtro, 'strlen');

        foreach ($filtro as $chave => $valor) {
            $lista[] = str_replace('_',' ', $chave) . ': <b>' . str_replace('-', '~', $valor) . '</b>';
        }

        return implode(' / ', $lista) ?: [];

    }

    function recibo($ID_Pagamento) {

        $data['pagamento'] = $this->Pagamento_model->get_pagamento($ID_Pagamento);

        $this->load->model('Configuracao_model');
        $data['configuracao'] = $this->Configuracao_model->get_configuracao(1);

        $this->load->view('pagamento/recibo',$data);

    }

    /*
     * Listing of pagamento
     */
    function index()
    {
        $params['limit'] = RECORDS_PER_PAGE; 
        $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
        
        $config = $this->config->item('pagination');
        $config['base_url'] = site_url('pagamento/index?');
        $config['total_rows'] = $this->Pagamento_model->get_all_pagamento_count();
        $this->pagination->initialize($config);

        $data['pagamento'] = $this->Pagamento_model->get_all_pagamento($params);
        
        $data['_view'] = 'pagamento/index';
        $this->load->view('layouts/main',$data);
    }

    function relatorio($print = 'html')
    {
        $params = array();

        //Para utilizar filtros é necessário adicionar esse snippet ao metodo do controller sempre e também adicionar o metodo filtrar [a exemplo deste controller]
        $data['filtro'] = $this->session->flashdata('filtro');
        if(isset($data['filtro']) && !empty($data['filtro'])) {
            $data['filtros_aplicados'] = $this->listar_filtros($data['filtro']);
            $params['filtro'] = $this->session->flashdata('filtro');
            $params['filtro']['Total_Pago >'] = 0;
            $ativar_paginacao = false;
        } else {
            // $ativar_paginacao = true;
            //Se nada foi filtrado então trás os dados do mês atual
            $params['filtro'] = ['Ano_Mes_Pagamento'=>date('m-Y'), 'Nome_Investidor'=>'', 'Total_Pago >' => 0];
            $data['filtro'] = ['Ano_Mes_Pagamento'=>date('m-Y'), 'Nome_Investidor'=>'', 'Total_Pago >' => 0];
            $ativar_paginacao = false;
        }

        //Caso exista filtro, desativar paginação
        if ($ativar_paginacao && $print == 'html') {
            $params['limit'] = RECORDS_PER_PAGE; 
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
            $params['filtro'] = ['Ano_Mes_Pagamento'=>date('m-Y'), 'Nome_Investidor'=>'', 'Total_Pago >' => 0];
            $config = $this->config->item('pagination');
            $config['base_url'] = site_url('pagamento/relatorio?');
            $config['total_rows'] = $this->Pagamento_model->get_all_pagamento_count($params);
            $this->pagination->initialize($config);
        }

        $data['pagamento'] = $this->Pagamento_model->get_all_pagamento($params);
        $data['valor_pagamento_total'] = 0;
        $data['valor_com_juros_total'] = 0;
        
        if ($print == 'html') {
            $data['_view'] = 'pagamento/relatorio';
            $this->load->view('layouts/main',$data);
        } 

        if ($print == 'print') {
            $data['_view'] = 'pagamento/relatorio';
            $this->load->view('layouts/print',$data);
        }
    }

    /*
     * Adding a new pagamento
     */
    function add()
    {   
        show_error('Somente através de quitação de débito podem ser adicionadas entradas na conta.');
        /*
        $this->load->library('form_validation');

		$this->form_validation->set_rules('ID_Emprestimo','ID Emprestimo','required');
		$this->form_validation->set_rules('Valor_Pago','Valor Pago','required|numeric');
		$this->form_validation->set_rules('Data_Pagamento','Data Pagamento','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'ID_Emprestimo' => $this->input->post('ID_Emprestimo'),
				'Valor_Pago' => $this->input->post('Valor_Pago'),
				'Data_Pagamento' => convertDateYmdHis($this->input->post('Data_Pagamento') . ' ' . date('H:i:s')),
            );
            $pagamento_id = $this->Pagamento_model->add_pagamento($params);

            #Incrementar saldo da conta
            $this->load->model('Conta_model');
            $conta_investimento = $this->Conta_model->get_conta(1); //TODO: Atualmente somente a conta ID = 1 é debitada ou creditada
            $conta_lucro = $this->Conta_model->get_conta(2); //TODO: Atualmente somente a conta ID = 1 é debitada ou creditada
            $params = array('Saldo_Conta' => ( $conta_investimento['Saldo_Conta'] + $this->input->post('Valor_Pago') ) );
            $this->Conta_model->update_conta($conta_investimento['ID_Conta'],$params); //TODO: Atualmente somente a conta ID = 1 é debitada ou creditada

            redirect('pagamento/index');
        }
        else
        {
			$this->load->model('Emprestimo_model');
			$data['all_emprestimo'] = $this->Emprestimo_model->get_all_emprestimo();
            
            $data['_view'] = 'pagamento/add';
            $this->load->view('layouts/main',$data);
        }
        */
    }  

    function juros($ID_Emprestimo)
    {   

        $this->load->library('form_validation');

        $this->load->model('Lancamento_model');
        $this->load->model('Forma_pagamento_model');
        $this->load->model('Configuracao_model');
        $this->load->model('Emprestimo_model');

        $data['configuracao'] = $this->Configuracao_model->get_configuracao();
        $data['emprestimo'] = $this->Emprestimo_model->get_emprestimo($ID_Emprestimo);
        $data['formas_pagamento'] = $this->Forma_pagamento_model->get_all_forma_pagamento();

        $ID_Emprestimo_Pai = $data['emprestimo']['ID_Emprestimo_Pai'];

		$this->form_validation->set_rules('ID_Emprestimo','ID Emprestimo','required');
		$this->form_validation->set_rules('ID_Forma_Pagamento','Forma de Pagamento','required');
		$this->form_validation->set_rules('Valor_Pago','Valor Pago','required|numeric');
		$this->form_validation->set_rules('Data_Pagamento','Data Pagamento','required');
		
		if($this->form_validation->run())     
        {   

            // Se o valor pago for maior que o valor devido
            // Divide o valor_pago pelo valor devido
            // Determina quantas parcelas pode pagar
            // Armazena os valores num array (incluindo o resto da divisão que pagará a última pendência parcialmente)
            // Itera sobre o array de valores para abater a parcela atual e as futuras
            // O Valor pago não poderá ser superior ao total da pendência dentro deste empréstimo
            // Pega todas as parcelas pendentes e inicia o loop de baixas

            $params = array(
				'ID_Emprestimo' => $this->input->post('ID_Emprestimo'),
				'Valor_Pago' => $this->input->post('Valor_Pago'),
				'Valor_Lucro_Pagamento' => $this->input->post('Valor_Lucro_Pagamento'),
				'Valor_Retorno_Pagamento' => $this->input->post('Valor_Retorno_Pagamento'),
				'Valor_Restante_Pagamento' => $this->input->post('Valor_Restante_Pagamento'),
                'Data_Pagamento' => convertDateYmdHis($this->input->post('Data_Pagamento') . ' ' . date('H:i:s')),
                'ID_User_Create' => $this->session->userdata['user_id'],
                'Date_Created' => Date('Y/m/d H:i:s'),
                'ID_User_Update' => $this->session->userdata['user_id'],
                'Date_Updated' => Date('Y/m/d H:i:s'),
                'ID_Forma_Pagamento' => $this->input->post('ID_Forma_Pagamento')
            );
            $pagamento_id = $this->Pagamento_model->add_pagamento($params);


            // Registrar Lançamento
            $params = array(
				'ID_Emprestimo_Relacionado' => $this->input->post('ID_Emprestimo'),
				'ID_Cliente_Relacionado' => $data['emprestimo']['ID_Investidor'],
				'Motivo_Lancamento' => '', // Emprestimo
				'Valor_Lancamento' => $this->input->post('Valor_Pago'),
				'ID_Conta_Descontada' => 1, // TODO: Rever conceito de conta de Lucro e Prejuizo
				'Tipo_Lancamento' => 1, // 1 - Entrada / 0 - Saída
                'Data_Lancamento' => Date('Y/m/d H:i:s'),
                'ID_User_Create' => $this->session->userdata['user_id'],
                'Date_Created' => Date('Y/m/d H:i:s'),
                'ID_User_Update' => $this->session->userdata['user_id'],
                'Date_Updated' => Date('Y/m/d H:i:s'),
                'ID_Forma_Pagamento' => $this->input->post('ID_Forma_Pagamento')
            );
            $lancamento_id = $this->Lancamento_model->add_lancamento($params);


            $total_pago = $data['emprestimo']['Total_Pago'] + $this->input->post('Valor_Pago');
            $lucro_atual = $data['emprestimo']['Lucro_Total'];

            //Altera a data de pagamento do emprestimo, total pago e lucro total
            //TODO: Trocar nome Data_Pagamento para Data_Previsao e retirar essa atualização, pois 
            //a data em questão deverá ser mantida em outra tabela (ou deve ser criado um campo com esse nome e para apenas esta finalidade)
            //pois atualmente é como se o campo Data_Pagamento estivesse servindo tanto para armazenar
            //a data de previsão quanto a data da efetivação do pagamento do debito (que já tem réplicas nas tabelas pagamento e lancamento)
            $params = array(
                'Total_Pago' =>  $total_pago,
                'Lucro_Total' => $lucro_atual + $this->input->post('Valor_Lucro_Pagamento'),
                'Valor_Restante_Emprestimo' => $data['emprestimo']['Valor_Restante_Corrigido']-$this->input->post('Valor_Pago'),
                'Valor_Restante_Corrigido' => $this->input->post('Valor_Restante_Pagamento'),
                'ID_User_Update' => $this->session->userdata['user_id'],
                'Date_Updated' => Date('Y/m/d H:i:s'),
            );
            $this->Emprestimo_model->update_emprestimo($ID_Emprestimo,$params);     

            #Incrementar saldo das contas (1 - Conta de Investimento e 2 - Conta de Lucro)
            $this->load->model('Conta_model');

            #Ajuste da conta 1
            $id_conta_investimento = 1;
            $conta_investimento = $this->Conta_model->get_conta($id_conta_investimento); //Conta 1 é a conta de investimento (é creditada apenas quando o valor pago ultrapassa o lucro)
            $params = array('Saldo_Conta' => ( $conta_investimento['Saldo_Conta'] + $this->input->post('Valor_Retorno_Pagamento') ) );
            $this->Conta_model->update_conta($conta_investimento['ID_Conta'],$params); 

            #Ajuste da conta 2
            $id_conta_lucro = 2;
            $conta_lucro = $this->Conta_model->get_conta($id_conta_lucro); //Conta 2 é a conta de investimento (é creditada apenas quando o valor pago ultrapassa o lucro)
            $params = array('Saldo_Conta' => ( $conta_lucro['Saldo_Conta'] + $this->input->post('Valor_Lucro_Pagamento') ) );
            $this->Conta_model->update_conta($conta_lucro['ID_Conta'],$params); 

            #Retorna o valor do limite de crédito do investidor
            $ID_Investidor = $data['emprestimo']['ID_Investidor'];
            $this->load->model('Investidor_model');
            $investidor = $this->Investidor_model->get_investidor($ID_Investidor);

            $params = array('Limite_Credito' => $investidor['Limite_Credito']+$this->input->post('Valor_Pago'));
            $this->Investidor_model->update_investidor($ID_Investidor, $params);


            if ($this->input->post('Observacao') != '') {
                    
                $params = array(
                    'ID_Emprestimo_Parcela' => $ID_Emprestimo_Pai,
                    'ID_Emprestimo_Pai' => $ID_Emprestimo_Pai,
                    'Observacao' => nl2br($this->input->post('Observacao')),
                    'ID_User_Create' => $this->session->userdata['user_id'],
                    'Date_Created' => Date('Y/m/d H:i:s'),
                    'ID_User_Update' => $this->session->userdata['user_id'],
                    'Date_Updated' => Date('Y/m/d H:i:s'),
                );
                
                $observacao_emprestimo_id = $this->Observacao_emprestimo_model->add_observacao_emprestimo($params);

            }

            #Se não existe mais valor restante, logo o empréstimo está quitado
            if ($this->input->post('Valor_Restante_Pagamento') <= 0) {

                #Atualizar o status do emprestimo
                $params = array('Status_Emprestimo' => '1');
                $this->Emprestimo_model->update_emprestimo($ID_Emprestimo,$params); 

                #Enviar SMS
                redirect('mensagem/quitar/'.$ID_Emprestimo);
                exit();
            }
            
            if ($this->ion_auth->is_cobrador()) {
                redirect('rota/index');
            } else {
                redirect('emprestimo/resumo/'.$ID_Emprestimo);
            }
        }
        else
        {
			$this->load->model('Emprestimo_model');
			$data['all_emprestimo'] = $this->Emprestimo_model->get_all_emprestimo();
            
            $data['_view'] = 'pagamento/juros';
            $this->load->view('layouts/main',$data);
        }

    }  

    /*
     * Editing a pagamento
     */
    function edit($ID_Pagamento)
    {   
        show_error('Somente através de quitação de débito podem ser adicionadas entradas na conta.');
        /*
        // check if the pagamento exists before trying to edit it
        $data['pagamento'] = $this->Pagamento_model->get_pagamento($ID_Pagamento);
        
        if(isset($data['pagamento']['ID_Pagamento']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('ID_Emprestimo','ID Emprestimo','required');
			$this->form_validation->set_rules('Valor_Pago','Valor Pago','required|numeric');
			$this->form_validation->set_rules('Data_Pagamento','Data Pagamento','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'ID_Emprestimo' => $this->input->post('ID_Emprestimo'),
					'Valor_Pago' => $this->input->post('Valor_Pago'),
					'Data_Pagamento' => convertDateYmdHis($this->input->post('Data_Pagamento') . ' ' . date('H:i:s')),
                );

                $this->Pagamento_model->update_pagamento($ID_Pagamento,$params);            
                redirect('pagamento/index');
            }
            else
            {
				$this->load->model('Emprestimo_model');
				$data['all_emprestimo'] = $this->Emprestimo_model->get_all_emprestimo();

                $data['_view'] = 'pagamento/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('O pagamento que você está tentando acessar não existe.');

        */
    } 

    /*
     * Deleting pagamento
     */
    function remove($ID_Pagamento)
    {
        $pagamento = $this->Pagamento_model->get_pagamento($ID_Pagamento);

        // check if the pagamento exists before trying to delete it
        if(isset($pagamento['ID_Pagamento']))
        {
            $this->Pagamento_model->delete_pagamento($ID_Pagamento);
            redirect('pagamento/index');
        }
        else
            show_error('O pagamento que você está tentando deletar não existe.');
    }
    
}
