<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Emprestimo extends CI_Controller
{

    function __construct()
    {
        parent::__construct();
        $this->load->model('Emprestimo_model');
        $this->load->model('Pagamento_model');
        $this->load->model('Configuracao_model');
        $this->load->model('Forma_pagamento_model');
        $this->load->model('Observacao_emprestimo_model');

        $this->load->helper('text');

        //$this->output->enable_profiler(TRUE);
    }


    function filtrar($page = 'index')
    {

        //Este método apenas irá definir como filtro todos os campos que foram postados e redirecionar para a página desejada        
        $filtro = $_POST;

        $this->session->set_flashdata('filtro', $filtro);
        redirect('emprestimo/' . $page);
    }

    function listar_filtros($filtro = array())
    {

        $filtro = array_filter($filtro, 'strlen');

        foreach ($filtro as $chave => $valor) {
            $lista[] = str_replace('_', ' ', $chave) . ': <b>' . str_replace('-', '~', $valor) . '</b>';
        }

        return implode(' / ', $lista) ?: [];
    }

    /*
     * Listing of emprestimo
     */
    function index()
    {

        //Para utilizar filtros é necessário adicionar esse snippet ao metodo do controller sempre e também adicionar o metodo filtrar [a exemplo deste controller]
        $data['filtro'] = $this->session->flashdata('filtro');
        if (isset($data['filtro']) && !empty($data['filtro'])) {
            $params['filtro'] = $this->session->flashdata('filtro');
            $ativar_paginacao = false;
        } else {
            $ativar_paginacao = true;
        }

        //Caso exista filtro, desativar paginação
        if ($ativar_paginacao) {
            $params['limit'] = RECORDS_PER_PAGE;
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
            $config = $this->config->item('pagination');
            $config['base_url'] = site_url('emprestimo/index?');
            $config['total_rows'] = $this->Emprestimo_model->get_all_emprestimo_count();
            $this->pagination->initialize($config);
        }

        $data['emprestimo'] = $this->Emprestimo_model->get_all_emprestimo($params);

        $data['_view'] = 'emprestimo/index';
        $this->load->view('layouts/main', $data);
    }

    function pendentes($print = 'html')
    {

        $params = array();

        //Para utilizar filtros é necessário adicionar esse snippet ao metodo do controller sempre e também adicionar o metodo filtrar [a exemplo deste controller]
        $data['filtro'] = $this->session->flashdata('filtro');

        //var_dump($data['filtro']); exit();

        if (isset($data['filtro']) && !empty($data['filtro'])) {
            $params['filtro'] = $this->session->flashdata('filtro');
            $ativar_paginacao = false;
        } else {
            $ativar_paginacao = true;
        }

        //Caso exista filtro, desativar paginação
        if ($ativar_paginacao && $print == 'html') {
            $params['limit'] = 100000000;
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
            $config = $this->config->item('pagination');
            $config['base_url'] = site_url('emprestimo/pendentes?');
            $config['total_rows'] = $this->Emprestimo_model->get_all_emprestimo_pendente_count($params);
            $this->pagination->initialize($config);
        }

        $data['emprestimo'] = $this->Emprestimo_model->get_all_emprestimo_by_investidor($params);
        $data['valor_emprestimo_total'] = 0;
        $data['valor_com_juros_total'] = 0;

        if ($print == 'html') {
            $data['_view'] = 'emprestimo/pendentes';
            $this->load->view('layouts/main', $data);
        }

        if ($print == 'print') {
            $data['_view'] = 'emprestimo/pendentes';
            $this->load->view('layouts/print', $data);
        }
    }

    function vencidos($print = 'html')
    {
        $params = array();

        //Para utilizar filtros é necessário adicionar esse snippet ao metodo do controller sempre e também adicionar o metodo filtrar [a exemplo deste controller]
        $data['filtro'] = $this->session->flashdata('filtro');
        if (isset($data['filtro']) && !empty($data['filtro'])) {
            $params['filtro'] = $this->session->flashdata('filtro');
            $ativar_paginacao = false;
        } else {
            $ativar_paginacao = true;
        }

        //Caso exista filtro, desativar paginação
        if ($ativar_paginacao && $print == 'html') {
            $params['limit'] = RECORDS_PER_PAGE;
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
            $config = $this->config->item('pagination');
            $config['base_url'] = site_url('emprestimo/vencidos?');
            $config['total_rows'] = $this->Emprestimo_model->get_all_emprestimo_vencido_count($params);
            $this->pagination->initialize($config);
        }

        $data['emprestimo'] = $this->Emprestimo_model->get_all_emprestimo_vencido($params);
        $data['valor_emprestimo_total'] = 0;
        $data['valor_com_juros_total'] = 0;

        if ($print == 'html') {
            $data['_view'] = 'emprestimo/vencidos';
            $this->load->view('layouts/main', $data);
        }

        if ($print == 'print') {
            $data['_view'] = 'emprestimo/vencidos';
            $this->load->view('layouts/print', $data);
        }
    }

    function quitados($print = 'html')
    {
        $params = array();

        //Para utilizar filtros é necessário adicionar esse snippet ao metodo do controller sempre e também adicionar o metodo filtrar [a exemplo deste controller]
        $data['filtro'] = $this->session->flashdata('filtro');
        if (isset($data['filtro']) && !empty($data['filtro'])) {
            $data['filtros_aplicados'] = $this->listar_filtros($data['filtro']);
            $params['filtro'] = $this->session->flashdata('filtro');
            $ativar_paginacao = false;
        } else {
            $ativar_paginacao = true;
        }

        //Caso exista filtro, desativar paginação
        if ($ativar_paginacao && $print == 'html') {
            $params['limit'] = RECORDS_PER_PAGE;
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
            $config = $this->config->item('pagination');
            $config['base_url'] = site_url('emprestimo/quitados?');
            $config['total_rows'] = $this->Emprestimo_model->get_all_emprestimo_quitado_count($params);
            $this->pagination->initialize($config);
        }

        $data['emprestimo'] = $this->Emprestimo_model->get_all_emprestimo_quitado($params);
        $data['valor_emprestimo_total'] = 0;
        $data['valor_com_juros_total'] = 0;

        if ($print == 'html') {
            $data['_view'] = 'emprestimo/quitados';
            $this->load->view('layouts/main', $data);
        }

        if ($print == 'print') {
            $data['_view'] = 'emprestimo/quitados';
            $this->load->view('layouts/print', $data);
        }
    }

    /*
     * Adding a new emprestimo
     */
    function add($Edicao = false, $Emprestimo_Old = null)
    {
        $this->load->library('form_validation');

        $this->load->model('Conta_model');
        $conta_investimento = $this->Conta_model->get_conta(1); //TODO: Atualmente somente a conta ID = 1 é debitada ou creditada
        $conta_lucro = $this->Conta_model->get_conta(2); //TODO: Atualmente somente a conta ID = 1 é debitada ou creditada

        $ID_Investidor = $this->input->post('ID_Investidor');
        $this->load->model('Investidor_model');
        $investidor = $this->Investidor_model->get_investidor($ID_Investidor);

        $this->form_validation->set_rules('ID_Investidor', 'ID Investidor', 'required');
        if ($Edicao == false) {
            $this->form_validation->set_rules('Valor_Emprestimo', 'Valor Emprestimo', 'required|numeric|greater_than_equal_to[1]|less_than_equal_to[' . intval($investidor['Limite_Credito'] - ($this->input->post('Valor_Emprestimo') * $this->input->post('Percentual_Juros') / 100)) . ']');
        } else {
            $this->form_validation->set_rules('Valor_Emprestimo', 'Valor Emprestimo', 'required|numeric|greater_than_equal_to[1]');
        }
        $this->form_validation->set_rules('Percentual_Juros', 'Percentual Juros', 'required|numeric');
        $this->form_validation->set_rules('Data_Emprestimo', 'Data Emprestimo', 'required');
        $this->form_validation->set_rules('Data_Pagamento', 'Data Pagamento', 'required');
        $this->form_validation->set_rules('Numero_Parcelas', 'Numero Parcelas', 'required|greater_than_equal_to[1]');
        $this->form_validation->set_rules('Modalidade', 'Modalidade', 'required');
        $this->form_validation->set_rules('ID_Forma_Pagamento', 'Forma de Pagamento', 'required');

        #Verifica se existe saldo na conta para realizar o empréstimo

        if ($conta_investimento['Saldo_Conta'] >= $this->input->post('Valor_Emprestimo')) {

            if ($this->form_validation->run()) {

                $params = array(
                    'ID_Investidor' => $this->input->post('ID_Investidor'),
                    'Status_Emprestimo' => '0',
                    'Valor_Emprestimo' => $this->input->post('Valor_Emprestimo'),
                    'Valor_Restante_Emprestimo' => $this->input->post('Valor_Emprestimo'),
                    'Valor_Restante_Corrigido' => $this->input->post('Valor_Emprestimo') + ($this->input->post('Valor_Emprestimo') * $this->input->post('Percentual_Juros') / 100),
                    'Percentual_Juros' => $this->input->post('Percentual_Juros'),
                    'Data_Emprestimo' => date('Y-m-d H:i:s', strtotime(str_replace('/', '-', $this->input->post('Data_Emprestimo')))) . ' ' . date('H:i:s'),
					
                    'Data_Pagamento' => date('Y-m-d H:i:s', strtotime(str_replace('/', '-', $this->input->post('Data_Pagamento')))),
                    'Numero_Parcelas' => $this->input->post('Numero_Parcelas'),
                    'Total_Emprestimo_Original' => $this->input->post('Valor_Emprestimo'),
                    'ID_Emprestimo_Pai' => NULL,
                    'Modalidade' =>  $this->input->post('Modalidade'),
                    'ID_User_Create' => $this->session->userdata['user_id'],
                    'Date_Created' => Date('Y/m/d H:i:s'),
                    'ID_User_Update' => $this->session->userdata['user_id'],
                    'Date_Updated' => Date('Y/m/d H:i:s'),
                );

                #Calcular valor de cada parcela
                $valor_total_emprestimo = moeda($this->input->post('Valor_Emprestimo'));
                $numero_parcelas = $this->input->post('Numero_Parcelas');
                $valor_cada_parcela = moeda($valor_total_emprestimo / $numero_parcelas);

                #Na ultima parcela, possíveis valores residuais (restos de divisões imprecisas são compensados)
                $valor_ultima_parcela = $valor_cada_parcela + ($valor_total_emprestimo - moeda($valor_cada_parcela * $numero_parcelas));

                #Fazer loop para incluir cada parcela como um registro de emprestimo
                #Incluir campo Total de Parcelas
                #Alterar campo Numero de Parcelas para "Numero_Parcela"
                #Exibir parcelas como "N de T" sendo N o numero da parcela e T o total de parcelas
                #       por exemplo 1 de 2 (onde 1 é o número da primeira parcela de 2 parcelas)
                #                   2 de 2 (onde 2 é a segunda parcela do total de 2 parcelas)
                #Calcular juros mensalmente sobre o valor de cada parcela

                #Gera a string de incremento das datas de pagamento conforme a modalidade definida
                #Modalidades: 1 - Mensal ("+1 month")
                #             2 - Semanal ("+7 day")
                #             3 - Diária ("+1 day")     

                $modalidade = $this->input->post('Modalidade');

                if ($modalidade == '1') {
                    $incrementar_data = "1 day";
                }
                if ($modalidade == '2') {
                    $incrementar_data = "7 day";
                }
                if ($modalidade == '3') {
                    $incrementar_data = "1 month";
                }

                #TODO: Incluir tratativa para dias úteis

                for ($i = 1; $i <= $numero_parcelas; $i++) {
                    $valor_parcela_atual = $i == $numero_parcelas ? $valor_ultima_parcela : $valor_cada_parcela;
                    $params['Valor_Emprestimo'] = $valor_parcela_atual;
                    $params['Valor_Restante_Emprestimo'] = $valor_parcela_atual;
                    $params['Valor_Restante_Corrigido'] = $valor_parcela_atual + ($valor_parcela_atual * ($this->input->post('Percentual_Juros') / 100));
                    $params['Data_Pagamento'] = $i > 1 ? date("Y-m-d H:i:s", strtotime($incrementar_data, strtotime($params['Data_Pagamento']))) : Date('Y-m-d 23:59:59', strtotime($params['Data_Pagamento']));
                    $params['ID_User_Create'] = $this->session->userdata['user_id'];
                    $params['ID_User_Update'] = $this->session->userdata['user_id'];

                    // Se a data criada for Sabado acrescenta +2 dias pra cair na segunda
                    // Se a data gerada for Domingo acrescenta +1 dia para cair na terça
                    if (date('w', strtotime($params['Data_Pagamento'])) == 6) {
                        $params['Data_Pagamento'] = date("Y-m-d H:i:s", strtotime("2 day", strtotime($params['Data_Pagamento']))) . ' 23:59:59';
                    }
                    if (date('w', strtotime($params['Data_Pagamento'])) == 0) {
                        $params['Data_Pagamento'] = date("Y-m-d", strtotime("1 day", strtotime($params['Data_Pagamento']))) . ' 23:59:59';
                    }
                    $params['Parcela_Atual'] = $i;
                    $emprestimo_id[] = $this->Emprestimo_model->add_emprestimo($params);

                    #Atualiza ID do emprestimo pai
                    $ID_Emprestimo_Pai = $this->input->post('ID_Emprestimo_Pai') > 0 ? $this->input->post('ID_Emprestimo_Pai') : $emprestimo_id[0];
                    $params_update_emprestimo['ID_Emprestimo_Pai'] = $ID_Emprestimo_Pai;
                    if ($this->input->post('Parcela_Atual_Original')) {
                        $params_update_emprestimo['Parcela_Atual'] = $this->input->post('Parcela_Atual_Original');
                        $params_update_emprestimo['Numero_Parcelas'] = $this->input->post('Numero_Parcelas_Original');
                        $params_update_emprestimo['Data_Pagamento'] = date("Y-m-d H:i:s", strtotime(str_replace('/', '-', $this->input->post('Data_Emprestimo'))) . ' 23:59:59');
						if (!validateDateTimeFormat($params_update_emprestimo['Data_Pagamento'])) {
							$file = __FILE__;
							$line = __LINE__;
							echo "Erro na linha $line do arquivo $file: Data incorreta!";
                        exit();
                    }
                    }
                    $params_update_emprestimo['ID_User_Update'] = $this->session->userdata['user_id'];
                    $this->Emprestimo_model->update_emprestimo($emprestimo_id[$i - 1], $params_update_emprestimo);
                }

                if ($Edicao && $ID_Emprestimo_Pai != $this->input->post('ID_Emprestimo_Pai')) {
                    $params_update_emprestimo = ['ID_Emprestimo' => $ID_Emprestimo_Pai];
                    if (!validateDateTimeFormat($params_update_emprestimo['Data_Pagamento'])) {
                        $file = __FILE__;
                        $line = __LINE__;
                        echo "Erro na linha $line do arquivo $file: Data incorreta!";
                        exit();
                    }
                    $this->Emprestimo_model->update_emprestimo($emprestimo_id[0], $params_update_emprestimo);
                }
                // Se estamos lidando com uma edição (Caso o valor da diferença seja positivo)
                // Então apenas esse valor será registrado como saída na tabela lançamentos
                // Caso o valor seja negativo então um lançamento positivo será feito neste valor
                // como se o cliente tivesse decidido devolver parte do valor emprestado anteriormente

                // Inicialmente o tipo de lançamento é 0 - saida (a não ser que estejamos falando de uma edição)
                $tipo_lancamento = 0;

                $diferenca_valor_emprestimo = $this->input->post('Valor_Emprestimo') - $Emprestimo_Old['Valor_Emprestimo'];

                if ($Edicao == true) {
                    $tipo_lancamento = $diferenca_valor_emprestimo >= 0 ? 0 : 1;
                }

                $valor_lancamento = $Emprestimo_Old ? abs($diferenca_valor_emprestimo) : $this->input->post('Valor_Emprestimo');

                if ($valor_lancamento > 0) {

                    // Registrar Lançamento
                    $this->load->model('Lancamento_model');
                    $params = array(
                        'ID_Emprestimo_Relacionado' => $ID_Emprestimo_Pai,
                        'ID_Cliente_Relacionado' => $this->input->post('ID_Investidor'),
                        'Motivo_Lancamento' => '', // Emprestimo
                        'Valor_Lancamento' => $valor_lancamento,
                        'ID_Conta_Descontada' => 1, // TODO: Rever conceito de conta de Lucro e Investimento
                        'Tipo_Lancamento' => $tipo_lancamento, // 1 - Entrada / 0 - Saída
                        'Data_Lancamento' => Date('Y/m/d H:i:s'),
                        'ID_User_Create' => $this->session->userdata['user_id'],
                        'Date_Created' => Date('Y/m/d H:i:s'),
                        'ID_User_Update' => $this->session->userdata['user_id'],
                        'Date_Updated' => Date('Y/m/d H:i:s'),
                        'ID_Forma_Pagamento' => $this->input->post('ID_Forma_Pagamento'),
                    );
                    $lancamento_id = $this->Lancamento_model->add_lancamento($params);

                    #Abater valor da conta
                    $params = array('Saldo_Conta' => ($conta_investimento['Saldo_Conta'] - $this->input->post('Valor_Emprestimo')));
                    $this->Conta_model->update_conta($conta_investimento['ID_Conta'], $params);

                    #Abate o valor do limite de credito do investidor (com juros)
                    $params = array('Limite_Credito' => $investidor['Limite_Credito'] - ($this->input->post('Valor_Emprestimo') + ($this->input->post('Valor_Emprestimo') * $this->input->post('Percentual_Juros') / 100)));
                    $this->Investidor_model->update_investidor($ID_Investidor, $params);
                }

                if ($this->input->post('Observacao') != '') {

                    $params = array(
                        'ID_Emprestimo_Parcela' => $ID_Emprestimo_Pai,
                        'ID_Emprestimo_Pai' => $ID_Emprestimo_Pai,
                        'Observacao' => nl2br($this->input->post('Observacao')),
                        'ID_User_Create' => $this->session->userdata['user_id'],
                        'Date_Created' => Date('Y/m/d H:i:s'),
                        'ID_User_Update' => $this->session->userdata['user_id'],
                        'Date_Updated' => Date('Y/m/d H:i:s'),
                    );

                    $observacao_emprestimo_id = $this->Observacao_emprestimo_model->add_observacao_emprestimo($params);
                }

                #Se o numero de parcelas for maior que 1 então redireciona o usuário para parcelamento
                //redirect('investidor/parcelas/'.$this->input->post('ID_Investidor'));

                #Enviar SMS
                redirect('mensagem/enviar/' . $ID_Emprestimo_Pai);
                exit();
            }
        } else {

            $this->session->set_flashdata('alert', ['type' => 'danger', 'icon' => 'fa fa-warning', 'text' => 'Não existe saldo na conta para realizar este empréstimo! Saldo atual: ' . $conta_investimento['Saldo_Conta']]);
            // $this->form_validation->set_post_validation_error('Valor_Emprestimo','O valor do empréstimo não pode ser maior que o saldo da conta!');

        }

        $this->load->model('Investidor_model');
        $data['all_investidor'] = $this->Investidor_model->get_all_investidor();
        $data['formas_pagamento'] = $this->Forma_pagamento_model->get_all_forma_pagamento();

        $data['_view'] = 'emprestimo/add';
        $this->load->view('layouts/main', $data);
    }


    /*
     * Quita o empréstimo
     * Esta função irá alterar o status do empréstimo para Quitado e também
     * irá adicionar um registro na tabela pagamento com o valor total / restante do empréstimo
     * devidamente acrescido dos juros
     */
    function quitar($ID_Emprestimo)
    {

        redirect('pagamento/juros/' . $ID_Emprestimo);
    }


    function atualizar($ID_Emprestimo)
    {
        // Obtém informações do empréstimo e observações
        $data['emprestimo'] = $this->Emprestimo_model->get_emprestimo($ID_Emprestimo);
        $data['observacao'] = $this->Observacao_emprestimo_model->get_all_observacao_emprestimo_by_parcela($ID_Emprestimo);

        // Verifica se o empréstimo é uma parcela
        if ($ID_Emprestimo == $data['emprestimo']['ID_Emprestimo_Pai']) {
            // Obtém informações do empréstimo pai e atualiza a relação com a parcela
            $data['emprestimo'] = $this->Emprestimo_model->get_emprestimo_by_pai($data['emprestimo']['ID_Emprestimo_Pai']);
            $data['emprestimo']['ID_Emprestimo_Pai'] = $ID_Emprestimo;
        }

        // Verifica se o empréstimo é pai e atualiza juros e datas de vencimento para ele e suas parcelas
        if ($ID_Emprestimo == $data['emprestimo']['ID_Emprestimo_Pai']) {
            // Obtém todas as parcelas do empréstimo pai
            $parcelas = $this->Emprestimo_model->get_all_emprestimo_by_pai($data['emprestimo']['ID_Emprestimo']);
            foreach ($parcelas as $p) {

                //var_dump(json_encode($p));
                //echo '<hr>';

                // Calcula os novos valores de empréstimo e data de pagamento
                $params_update_emprestimo = array(
                    'Valor_Emprestimo' => $p['Valor_Emprestimo'] + ($p['Valor_Emprestimo'] * $p['Percentual_Juros'] / 100),
                    'Valor_Restante_Emprestimo' => $p['Valor_Emprestimo'] + ($p['Valor_Emprestimo'] * $p['Percentual_Juros'] / 100),
                    'Valor_Restante_Corrigido' => $p['Valor_Restante_Corrigido'] + ($p['Valor_Restante_Corrigido'] * $p['Percentual_Juros'] / 100),
                    'Data_Pagamento' => date('Y/m/d H:i:s', strtotime('+1 month', strtotime($p['Data_Previsao']))),
                    'ID_User_Update' => $this->session->userdata['user_id'],
                    'Date_Updated' => Date('Y/m/d H:i:s'),
                );

                // Verifica se a data é válida, senão exibe erro
                if (!validateDateTimeFormat($params_update_emprestimo['Data_Pagamento'])) {
                    $file = __FILE__;
                    $line = __LINE__;
                    echo "Erro na linha $line do arquivo $file: Data incorreta!";
                    var_dump(json_encode($params_update_emprestimo));
                    echo '<hr>';
                    exit();
                }

                // Atualiza as informações do empréstimo
                $this->Emprestimo_model->update_emprestimo($p['ID_Filho'], $params_update_emprestimo);

                // Cria uma observação sobre a atualização da parcela
                $params = array(
                    'ID_Emprestimo_Parcela' => $p['ID_Filho'],
                    'ID_Emprestimo_Pai' => $ID_Emprestimo,
                    'Observacao' => 'Atualização de parcela, juros e data de vencimento...',
                    'ID_User_Create' => $this->session->userdata['user_id'],
                    'Date_Created' => Date('Y/m/d H:i:s'),
                    'ID_User_Update' => $this->session->userdata['user_id'],
                    'Date_Updated' => Date('Y/m/d H:i:s'),
                );
                $observacao_emprestimo_id = $this->Observacao_emprestimo_model->add_observacao_emprestimo($params);

                // Define mensagem de sucesso na sessão
                $this->session->set_flashdata('alert', ['type' => 'success', 'icon' => 'fa fa-check', 'text' => 'Parcela atualizada com sucesso!']);

                // redireciona para a pagina de detalhes do emprestimo
                redirect('emprestimo/resumo/'.$ID_Emprestimo);
            }
        } else {
            // Calcula os novos valores de empréstimo e data de pagamento para o empréstimo pai
            $params_update_emprestimo = array(
                'Valor_Emprestimo' => $data['emprestimo']['Valor_Emprestimo'] + ($data['emprestimo']['Valor_Emprestimo'] * $data['emprestimo']['Percentual_Juros'] / 100),
                'Valor_Restante_Emprestimo' => $data['emprestimo']['Valor_Emprestimo'] + ($data['emprestimo']['Valor_Emprestimo'] * $data['emprestimo']['Percentual_Juros'] / 100),
                'Valor_Restante_Corrigido' => $data['emprestimo']['Valor_Restante_Corrigido'] + ($data['emprestimo']['Valor_Restante_Corrigido'] * $data['emprestimo']['Percentual_Juros'] / 100),
                'Data_Pagamento' => date('Y-m-d H:i:s', strtotime(str_replace('/', '-', $this->input->post('Data_Pagamento')))),
                'ID_User_Update' => $this->session->userdata['user_id'],
                'Date_Updated' => Date('Y/m/d H:i:s'),
            );

            // Verifica se a data é válida, senão exibe erro
            if (!validateDateTimeFormat($params_update_emprestimo['Data_Pagamento'])) {
                $file = __FILE__;
                $line = __LINE__;
                echo "Erro na linha $line do arquivo $file: Data incorreta!";
                exit();
            }

            // Atualiza as informações do empréstimo pai
            $this->Emprestimo_model->update_emprestimo($ID_Emprestimo, $params_update_emprestimo);

            // Cria uma observação sobre a atualização do empréstimo pai
            $params = array(
                'ID_Emprestimo_Parcela' => $ID_Emprestimo,
                'ID_Emprestimo_Pai' => $data['emprestimo']['ID_Emprestimo_Pai'],
                'Observacao' => 'Atualização de parcela, juros e data de vencimento...',
                'ID_User_Create' => $this->session->userdata['user_id'],
                'Date_Created' => Date('Y/m/d H:i:s'),
                'ID_User_Update' => $this->session->userdata['user_id'],
                'Date_Updated' => Date('Y/m/d H:i:s'),
            );
            $observacao_emprestimo_id = $this->Observacao_emprestimo_model->add_observacao_emprestimo($params);

            // redireciona para a pagina de detalhes do emprestimo
            redirect('emprestimo/resumo/'.$ID_Emprestimo);
        }
    }


    /*
     * Editing a emprestimo
     */
    function edit($ID_Emprestimo)
    {
        // check if the emprestimo exists before trying to edit it
        $data['emprestimo'] = $this->Emprestimo_model->get_emprestimo($ID_Emprestimo);
        $data['observacao'] = $this->Observacao_emprestimo_model->get_all_observacao_emprestimo_by_parcela($ID_Emprestimo);

        if ($ID_Emprestimo == $data['emprestimo']['ID_Emprestimo_Pai']) {
            $data['emprestimo'] = $this->Emprestimo_model->get_emprestimo_by_pai($data['emprestimo']['ID_Emprestimo_Pai']);
            $data['emprestimo']['ID_Emprestimo_Pai'] = $ID_Emprestimo;
        }

        if (isset($data['emprestimo']['ID_Emprestimo'])) {

            if ($_POST) {
                // Se for um emprestimo pai remove todos os filhos
                if ($ID_Emprestimo == $data['emprestimo']['ID_Emprestimo_Pai']) {
                    $parcelas = $this->Emprestimo_model->get_all_emprestimo_by_pai($data['emprestimo']['ID_Emprestimo']);
                    foreach ($parcelas as $p) {
                        $this->remove($p['ID_Filho'], true);
                    }
                } else {
                    $this->remove($ID_Emprestimo, true);
                }
                $this->add(true, $data['emprestimo']);
            } else {
                $this->load->model('Investidor_model');
                $data['all_investidor'] = $this->Investidor_model->get_all_investidor();
                $data['formas_pagamento'] = $this->Forma_pagamento_model->get_all_forma_pagamento();

                $data['_view'] = 'emprestimo/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('O emprestimo que você está tentando acessar não existe.');
    }

    function cartao($ID_Emprestimo_Pai)
    {

        $data['emprestimo_pai'] = $this->Emprestimo_model->get_emprestimo_by_pai($ID_Emprestimo_Pai);

        if (isset($data['emprestimo_pai']['ID_Emprestimo'])) {

            $data['parcelas_emprestimo'] = $this->Emprestimo_model->get_all_emprestimo_by_pai($ID_Emprestimo_Pai);
            $data['prev'] = Date('m') - 1;
            $data['next'] = Date('m') + 1;

            $data_pagamento_final = '';
            $datas = array();
            foreach ($data['parcelas_emprestimo'] as $p) {
                $datas[] = Date('d/m/Y', strtotime($p['Data_Previsao']));
                $dates[] = Date('Y/m/d', strtotime($p['Data_Previsao']));
                $status[] = $p['Status_Emprestimo'];
                $valores_pagos[] = $p['Valor_Pago_Total'];
                $valores_restantes[] = $p['Valor_Restante_Corrigido'];
                $data_pagamento_final = $p['Data_Previsao'];
            }

            $data['datas'] = $datas;
            $data['dates'] = $dates;
            $data['status'] = $status;
            $data['valores_pagos'] = $valores_pagos;
            $data['valores_restantes'] = $valores_restantes;

            // Determina qual o dia da semana para identificar quantos
            // itens devem ser incluidos no array para que o calendário
            // sempre inicie a plotagem na segunda
            // incluir as datas no inicio do array até atingir a segunda
            // incluir as datas no final do array até atingir a proxima sexta

            // 0 - domingo / 6 - sábado
            $dia_semana = Date('w', strtotime($data['dates'][0]));
            $numero_itens_adicionar = $dia_semana - 1;

            $datas_before = array();
            $dates_before = array();

            for ($i = $numero_itens_adicionar; $i > 0; $i--) {
                //array_unshift($data['dates'], date("Y-m-d", strtotime('-' . $i . ' day', strtotime($data['dates'][$i]))));
                array_unshift($data['datas'], 'espaco_' . $i);
                array_unshift($data['dates'], 'espaco_' . $i);
                array_unshift($data['status'], '-');
                array_unshift($data['valores_pagos'], '-');
                array_unshift($data['valores_restantes'], '-');
                $datas_before[] = date("d/m/Y", strtotime(strtotime($data['datas'][0]) . " -$i day"));
                $dates_before[] = date("Y/m/d", strtotime(strtotime($data['dates'][0]) . " -$i day"));
            }

            for ($j = 0; $j < count($datas_before); $j++) {
                $data['datas'][$j] = $datas_before[$j];
            }

            for ($k = 0; $k < count($dates_before); $k++) {
                $data['dates'][$k] = $dates_before[$k];
            }

            for ($l = 1; $l <= 7; $l++) {
                $data['datas'][] = Date('d/m/Y', strtotime($data_pagamento_final . " $l day"));
                $data['dates'][] = Date('Y/m/d', strtotime($data_pagamento_final . " $l day"));
                $data['status'][] = '-';
                $data['valores_pagos'][] = '-';
                $data['valores_restantes'][] = '-';
            }

            $this->load->view('emprestimo/cartao', $data);
        } else
            show_error('O emprestimo que você está tentando deletar não existe.');
    }

    function resumo($ID_Emprestimo)
    {

        $this->load->model('Observacao_emprestimo_model');

        $emprestimo = $this->Emprestimo_model->get_emprestimo($ID_Emprestimo);
        $data['emprestimo_filho'] = $this->Emprestimo_model->get_emprestimo($ID_Emprestimo);
        $ID_Emprestimo_Pai = $emprestimo['ID_Emprestimo_Pai'];

        // Os dados que nos interessam são sempre os dados do PAI (Esta tela de resumo é atribuida ao empréstimo pai)
        // então mesmo recebendo o ID de um dos filhos, a tela irá exibir o resumo do PAI
        $emprestimo = $this->Emprestimo_model->get_emprestimo_by_pai($ID_Emprestimo_Pai);
        $data['emprestimo'] = $emprestimo;
        $data['parcelas_emprestimo'] = $this->Emprestimo_model->get_all_emprestimo_by_pai($ID_Emprestimo_Pai);
        $data['observacao'] = $this->Observacao_emprestimo_model->get_all_observacao_emprestimo_by_pai($ID_Emprestimo_Pai);

        $data['_view'] = 'emprestimo/resumo';
        $this->load->view('layouts/main', $data);
    }

    /*
     * Nota promissoria
     */
    function promissoria($ID_Emprestimo)
    {

        $data['configuracao'] = $this->Configuracao_model->get_configuracao(1);
        $data['emprestimo'] = $this->Emprestimo_model->get_emprestimo($ID_Emprestimo);

        $this->load->view('emprestimo/promissoria', $data);
    }

    /*
     * Todas as Notas promissorias referentes a cada parcela com base no Emprestimo PAI
     */
    function promissorias($ID_Emprestimo_Pai)
    {

        $data['configuracao'] = $this->Configuracao_model->get_configuracao(1);
        $data['emprestimos'] = $this->Emprestimo_model->get_all_emprestimo_by_pai($ID_Emprestimo_Pai);

        $this->load->view('emprestimo/promissorias', $data);
    }

    /*
     * Deleting emprestimo
     */
    function remove($ID_Emprestimo, $Edicao = false)
    {
        $emprestimo = $this->Emprestimo_model->get_emprestimo($ID_Emprestimo);

        // check if the emprestimo exists before trying to delete it
        if (isset($emprestimo['ID_Emprestimo'])) {

            #TODO: Confirmar a exclusão antes com o usuário
            #0. Coloca todas as Renegociações associadas a este empréstimo na memória
            $this->load->model('Renegociacao_model');
            $renegociacoes_associadas = $this->Renegociacao_model->get_all_renegociacao_by_emprestimo($ID_Emprestimo);

            #1. Excluir todas as Renegociacoes envolvendo este emprestimo
            $this->Renegociacao_model->delete_renegociacao_by_emprestimo($ID_Emprestimo);

            #1.1 Excluir todas as Parcelas de Renegociação envolvendo este emprestimo
            $this->load->model('Renegociacao_parcela_model');

            foreach ($renegociacoes_associadas as $r) {
                $this->Renegociacao_parcela_model->delete_parcelas_by_renegociacao($r['ID_Renegociacao']);
            }

            #2. Excluir todos os pagamentos envolvendo este emprestimo
            $this->load->model('Pagamento_model');
            $this->Pagamento_model->delete_pagamento_by_emprestimo($ID_Emprestimo);

            #3. Excluir o emprestimo efetivamente
            $this->Emprestimo_model->delete_emprestimo($ID_Emprestimo);

            #4. Retornar o saldo para a conta ou Retirar valor da conta (dependendo do status do emprestimo)
            #Retornar o valor na conta (TODO: Este código está duplicado em Renegociacao_Parcela->Quitar e Emprestimo->Quitar)
            #Ao executar qualquer manutenção neste código, favor ajustar o código nos Controlers Renegociacao_Parcela e Emprestimo
            #TODO: Futramente a idéia é criar um método único para realizar essa ação e evitar repetições conforme melhores práticas (DRY)
            #TODO: Futuramente as contas poderão ser várias, mas atualmente apenas a conta ID = 1 está sendo utilizada
            $this->load->model('Conta_model');

            $conta_investimento = $this->Conta_model->get_conta(1); //TODO: Atualmente somente a conta ID = 1 é debitada ou creditada
            $conta_lucro = $this->Conta_model->get_conta(2); //TODO: Atualmente somente a conta ID = 1 é debitada ou creditada

            #TODO: CRIAR REGISTRO NA TABELA DE LANÇAMENTO

            #TODO: Realizar mais testes com essa exclusão de empréstimo (referente ao saldo da conta )
            #Se o status do emprestimo for 0 (pendente) então o Valor_Empretimo deve retornar à conta de investimento

            #Se a rotina de exclusao houver sido chamada a partir de uma edição
            #Então não é necessário atualizar os saldos das contas nem o limite de crédito do cliente

            if (!$Edicao) {

                if ($emprestimo['Status_Emprestimo'] == '0') {

                    $params = array('Saldo_Conta' => ($conta_investimento['Saldo_Conta'] + $emprestimo['Valor_Emprestimo']));
                    $this->Conta_model->update_conta($conta_investimento['ID_Conta'], $params); //TODO: Atualmente somente a conta ID = 1 é debitada ou creditada

                } else {
                    #Se o status for diferente de pendente então apenas o valor do lucro deverá ser abatido
                    #e deverá ser abatido da conta de lucro (que é onde este valor foi creditado)
                    #$params = array('Saldo_Conta' => ( $conta_investimento['Saldo_Conta'] + $emprestimo['Lucro_Total'] ) );
                    #$this->Conta_model->update_conta( $conta_investimento['ID_Conta'],$params); //TODO: Atualmente somente a conta ID = 1 é debitada ou creditada

                    $params = array('Saldo_Conta' => ($conta_lucro['Saldo_Conta'] - $emprestimo['Lucro_Total']));
                    $this->Conta_model->update_conta($conta_lucro['ID_Conta'], $params); //TODO: Atualmente somente a conta ID = 1 é debitada ou creditada

                }

                #Retornar credito ao cliente
                $this->load->model('Investidor_model');
                $investidor = $this->Investidor_model->get_investidor($emprestimo['ID_Investidor']);
                $this->Investidor_model->update_investidor($emprestimo['ID_Investidor'], ['Limite_Credito' => ($investidor['Limite_Credito'] + $emprestimo['Valor_Emprestimo'])]);
            }

            if (!$Edicao) redirect('emprestimo/index');
        } else
            show_error('O emprestimo que você está tentando deletar não existe.');
    }


    function saidas($print = 'html')
    {

        $params = array();

        //Para utilizar filtros é necessário adicionar esse snippet ao metodo do controller sempre e também adicionar o metodo filtrar [a exemplo deste controller]
        $data['filtro'] = $this->session->flashdata('filtro');

        //var_dump($data['filtro']); exit();

        if (isset($data['filtro']) && !empty($data['filtro'])) {
            $params['filtro'] = $this->session->flashdata('filtro');
            $ativar_paginacao = false;
        } else {
            $ativar_paginacao = true;
        }

        //Caso exista filtro, desativar paginação
        if ($ativar_paginacao && $print == 'html') {
            $params['limit'] = RECORDS_PER_PAGE;
            $params['offset'] = ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;
            $config = $this->config->item('pagination');
            $config['base_url'] = site_url('emprestimo/pendentes?');
            $config['total_rows'] = $this->Emprestimo_model->get_all_emprestimo_pendente_count($params);
            $this->pagination->initialize($config);
        }

        $data['emprestimo'] = $this->Emprestimo_model->get_all_emprestimo_pendente($params);
        $data['valor_emprestimo_total'] = 0;
        $data['valor_com_juros_total'] = 0;

        if ($print == 'html') {
            $data['_view'] = 'emprestimo/saidas';
            $this->load->view('layouts/main', $data);
        }

        if ($print == 'print') {
            $data['_view'] = 'emprestimo/saidas';
            $this->load->view('layouts/print', $data);
        }
    }


    function reprogramar($ID_Emprestimo)
    {

        $this->load->library('form_validation');

        $this->form_validation->set_rules('Data_Pagamento', 'Data Pagamento', 'required');

        if ($this->form_validation->run()) {
            $params_update_emprestimo = array(
                'Data_Pagamento' => date("Y-m-d H:i:s", strtotime(str_replace('/', '-', $this->input->post('Data_Pagamento')))),
                'ID_User_Update' => $this->session->userdata['user_id'],
                'Date_Updated' => Date('Y/m/d H:i:s'),
            );
            if (!validateDateTimeFormat($params_update_emprestimo['Data_Pagamento'])) {
                $file = __FILE__;
                $line = __LINE__;
                echo "Erro na linha $line do arquivo $file: Data incorreta!";
                exit();
            }
            $this->Emprestimo_model->update_emprestimo($ID_Emprestimo, $params_update_emprestimo);

            redirect('emprestimo/resumo/' . $ID_Emprestimo);
        } else {
            $this->load->model('Emprestimo_model');

            $data['configuracao'] = $this->Configuracao_model->get_configuracao();
            $data['emprestimo'] = $this->Emprestimo_model->get_emprestimo($ID_Emprestimo);

            $data['_view'] = 'emprestimo/reprogramar';
            $this->load->view('layouts/main', $data);
        }
    }
}
