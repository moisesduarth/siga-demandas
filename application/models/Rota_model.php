<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Rota_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
        

    }

    /**
     * Copiar este método em todas as models onde necessitar de filtros
     * TODO: Tentar tornar isso generico (numa espécie de model genérica)
     */
    function tratar_filtro($filtro = array()) {

        #Eliminar todos registros sem valor do array
        $filtro = array_filter($filtro, 'strlen');

        #Percorrer apenas as chaves e valores que restaram após eliminar os vazios
        foreach ($filtro as $campo => $valor) {

            #Se o nome do campo iniciar com Data iremos fazer um Data Range (ou seja: Campo BETWEEN Valor1 AND Valor2)
            if (substr($campo,0,4)=='Data') {

                #Divide o valor (espera receber duas datas separados por traço tipo: 10/10/2019 - 20/10/2019)
                $data1 = formataData($valor, false);

                #Garante que a data seja pesquisada até o último minuto do dia
                $datax = explode(" ", $data1);
                if (null != $datax && count($datax)>1) {
                    $data1 = $data1[0];
                }

                $this->db->where($campo . '<=', $data1 . ' 23:59:59');

            } else if (substr($campo,0,4)=='Nome') {

                $this->db->like($campo, $valor);

            } else if (substr($campo,0,6)=='Status') {

                $this->db->where($campo, $valor);

            } else {

                $this->db->like($campo, $valor);
                
            }

            // $this->db->where($campo, $valor);
        }
       

    }

    /*
     * Get all emprestimo
     */
    function get_rotas($params = array(), $cidade = '')
    {
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        
        if(isset($params) && !empty($params) && array_key_exists('limit',$params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }
        
        //Sempre que se desejar adicionar filtro a uma consulta (model), este snnipet deve ser adicionado
        if (isset($params['filtro'])) {
            $this->tratar_filtro($params['filtro']);
        }
        
        //Se o perfil logado for Cobrador então pega apenas as rotas da sua cidade
        if ($cidade != '') {
            $this->db->where('investidor.Cidade LIKE "%' . $this->session->userdata['city'] . '%"');
        }
        
        $this->db->where('Status_Emprestimo','0');

        //var_dump($params['filtro']); exit();

        $this->db->order_by('investidor.Nome_Investidor, emprestimo.Parcela_Atual ASC');

        return $this->db->get('emprestimo')->result_array();

    }

    function get_rotas_count($params = array(), $cidade = '')
    {
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->where('Status_Emprestimo','0');

        $this->db->order_by('Nome_Investidor, Parcela_Atual', 'asc');

        if(isset($params) && !empty($params) && array_key_exists('limit',$params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }
        $this->db->where('Data_Pagamento', Date('Y/m/d'));

         //Se o perfil logado for Cobrador então pega apenas as rotas da sua cidade
         if ($cidade != '') {
            $this->db->where('investidor.Cidade LIKE "%' . $this->session->userdata['city'] . '%"');
        }
    
        $this->db->get('emprestimo');

        return $this->db->count_all_results();

    }

}
