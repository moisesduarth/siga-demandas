<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Emprestimo_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();

    }

    /**
     * Copiar este método em todas as models onde necessitar de filtros
     * TODO: Tentar tornar isso generico (numa espécie de model genérica)
     */
    function tratar_filtro($filtro = array()) {

        #Eliminar todos registros sem valor do array
        $filtro = array_filter($filtro, 'strlen');

        #Percorrer apenas as chaves e valores que restaram após eliminar os vazios
        foreach ($filtro as $campo => $valor) {

            #Se o nome do campo iniciar com Data iremos fazer um Data Range (ou seja: Campo BETWEEN Valor1 AND Valor2)
            if (substr($campo,0,4)=='Data') {

                #Divide o valor (espera receber duas datas separados por traço tipo: 10/10/2019 - 20/10/2019)
                $datas = explode('-', $valor);
                $data1 = formataData(ltrim(rtrim($datas[0])));
                $data2 = formataData(ltrim(rtrim($datas[1])));

                $this->db->where($campo . '>=', $data1 . ' 00:00:00');
                $this->db->where($campo . '<=', $data2 . ' 23:59:59');

            } else if (substr($campo,0,4)=='Nome') {

                $this->db->like($campo, $valor);

            } else if (substr($campo,0,6)=='Status') {

                $this->db->where($campo, $valor);

            } else {

                $this->db->like($campo, $valor);
                
            }

            // $this->db->where($campo, $valor);
        }
       

    }

    
    /*
     * Get emprestimo by ID_Emprestimo
     */
    function get_emprestimo($ID_Emprestimo)
    {
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        return $this->db->get_where('emprestimo',array('ID_Emprestimo'=>$ID_Emprestimo))->row_array();
    }

    function get_emprestimo_by_pai($ID_Emprestimo_Pai) 
    {
        $this->db->select('
                ID_Emprestimo, Numero_Parcelas, Modalidade, SUM(Valor_Emprestimo) as Valor_Emprestimo, 
                SUM(Total_Pago) as Total_Pago, SUM(Lucro_Total) as Lucro_Total,
                SUM(Valor_Restante_Emprestimo) as Valor_Restante_Emprestimo, 
                SUM(Valor_Restante_Corrigido) as Valor_Restante_Corrigido,
                Percentual_Juros,
                Data_Emprestimo,
                MIN(Data_Pagamento) as Data_Pagamento,
                MIN(Status_Emprestimo),
                Total_Emprestimo_Original,
                investidor.*
            ');
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->group_by('ID_Emprestimo_Pai, emprestimo.ID_Investidor ');
        return $this->db->get_where('emprestimo',array('ID_Emprestimo_Pai'=>$ID_Emprestimo_Pai))->row_array();
    }

    function get_all_emprestimo_by_pai($ID_Emprestimo_Pai) 
    {
        $this->db->select('
                emprestimo.ID_Emprestimo as ID_Filho, SUM(pagamento.Valor_Pago) as Valor_Pago_Total, Parcela_Atual, Numero_Parcelas, Valor_Emprestimo, Total_Pago, 
                Lucro_Total, Valor_Restante_Emprestimo, Valor_Restante_Corrigido, Percentual_Juros,
                Data_Emprestimo, pagamento.Data_Pagamento as Data_Pagamento, emprestimo.Data_Pagamento as Data_Previsao, 
                Status_Emprestimo, Total_Emprestimo_Original,
                investidor.*,
                pagamento.*
            ');
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->join('pagamento','emprestimo.ID_Emprestimo = pagamento.ID_Emprestimo', 'left');
        $this->db->group_by('ID_Filho');
        return $this->db->get_where('emprestimo',array('ID_Emprestimo_Pai'=>$ID_Emprestimo_Pai))->result_array();
    }
    
    
    /*
     * Get all emprestimo count
     */
    function get_all_emprestimo_count($params = array())
    {
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        
        //Sempre que se desejar adicionar filtro a uma consulta (model), este snnipet deve ser adicionado
        if (isset($params['filtro'])) {
            $this->tratar_filtro($params['filtro']);
        }
        
        $this->db->from('emprestimo');
        return $this->db->count_all_results();
    }

    function get_all_emprestimo_pendente_count($params = array())
    {
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->where('Status_Emprestimo', '0');
        
        //Sempre que se desejar adicionar filtro a uma consulta (model), este snnipet deve ser adicionado
        if (isset($params['filtro'])) {
            $this->tratar_filtro($params['filtro']);
        }
        
        $this->db->from('emprestimo');

        return $this->db->count_all_results();
    }

    function get_all_emprestimo_vencido_count($params = array())
    {
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->where('Status_Emprestimo', '0');
        $this->db->where('Data_Pagamento <=',date('Y-m-d'));
        
        //Sempre que se desejar adicionar filtro a uma consulta (model), este snnipet deve ser adicionado
        if (isset($params['filtro'])) {
            $this->tratar_filtro($params['filtro']);
        }
        
        $this->db->from('emprestimo');
        return $this->db->count_all_results();
    }

    function get_all_emprestimo_quitado_count($params = array())
    {
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->where('Status_Emprestimo', '1');
        
        //Sempre que se desejar adicionar filtro a uma consulta (model), este snnipet deve ser adicionado
        if (isset($params['filtro'])) {
            $this->tratar_filtro($params['filtro']);
        }
        
        $this->db->from('emprestimo');
        return $this->db->count_all_results();
    }
        
    /*
     * Get all emprestimo
     */
    function get_all_emprestimo($params = array())
    {
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->order_by('Nome_Investidor, Parcela_Atual', 'asc');

        if(isset($params) && !empty($params) && array_key_exists('limit',$params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }
        
        //Sempre que se desejar adicionar filtro a uma consulta (model), este snnipet deve ser adicionado
        if (isset($params['filtro'])) {
            $this->tratar_filtro($params['filtro']);
        }
        
        return $this->db->get('emprestimo')->result_array();
    }

    function get_all_last_emprestimo($limit = 100)
    {
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->order_by('Nome_Investidor', 'asc');
        $this->db->limit($limit);
        
        return $this->db->get('emprestimo')->result_array();
    }

    function get_all_last_emprestimo_pagamento($limit = 100)
    {
        $this->db->join('pagamento','pagamento.ID_Emprestimo = emprestimo.ID_Emprestimo', 'left');
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'left');
        $this->db->order_by('emprestimo.ID_Emprestimo', 'desc');
        $this->db->limit($limit);
        
        return $this->db->get('emprestimo')->result_array();
    }

    /*
     * Get all emprestimo
     */
    function get_all_emprestimo_pendente($params = array())
    {

        $this->db->where('Status_Emprestimo','0');
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->order_by('Nome_Investidor, Parcela_Atual', 'asc');

        if(isset($params) && !empty($params) && array_key_exists('limit',$params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }
        
        //Sempre que se desejar adicionar filtro a uma consulta (model), este snnipet deve ser adicionado
        if (isset($params['filtro'])) {
            $this->tratar_filtro($params['filtro']);
        }
        
        return $this->db->get('emprestimo')->result_array();
    }

    function get_all_emprestimo_by_investidor($params = array())
    {

        $this->db->select('emprestimo.ID_Investidor, investidor.Nome_Investidor, investidor.Celular, emprestimo.Numero_Parcelas, 
                           emprestimo.ID_Emprestimo, SUM(Valor_Emprestimo) as Valor_Emprestimo, Percentual_Juros, 
                           Data_Emprestimo, Data_Pagamento, CASE WHEN (AVG(Status_Emprestimo)<1) THEN 0 ELSE 1 END Status_Emprestimo, 
                           SUM(Total_Pago) as Total_Pago_Real,  SUM(Lucro_Total) as Lucro_Total, 
                           SUM(Valor_Restante_Emprestimo) as Valor_Restante_Emprestimo, 
                           SUM(Valor_Restante_Corrigido) as Valor_Restante_Corrigido, 
                           MAX(Data_Pagamento) as Data_Pagamento,
                           AVG(Total_Emprestimo_Original) as Total_Emprestimo_Original, Modalidade');
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->order_by('Nome_Investidor, Parcela_Atual', 'asc');

        if(isset($params) && !empty($params) && array_key_exists('limit',$params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }
        
        //Sempre que se desejar adicionar filtro a uma consulta (model), este snnipet deve ser adicionado
        if (isset($params['filtro'])) {
            $this->tratar_filtro($params['filtro']);
        }
        

        $this->db->group_by('emprestimo.ID_Investidor, emprestimo.ID_Emprestimo_Pai');

        return $this->db->get('emprestimo')->result_array();
    }

    function get_all_emprestimo_vencido($params = array()) {

        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->where('Status_Emprestimo','0');
        $this->db->where('Data_Pagamento <=',date('Y-m-d'));

        $this->db->order_by('Nome_Investidor', 'asc');

        if(isset($params) && !empty($params) && array_key_exists('limit',$params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }

        //Sempre que se desejar adicionar filtro a uma consulta (model), este snnipet deve ser adicionado
        if (isset($params['filtro'])) {
            $this->tratar_filtro($params['filtro']);
        }

        return $this->db->get('emprestimo')->result_array();

    }

    function get_all_emprestimo_quitado($params = array())
    {
        $this->db->join('investidor','investidor.ID_Investidor = emprestimo.ID_Investidor', 'join');
        $this->db->where('Status_Emprestimo','1');

        $this->db->order_by('Nome_Investidor', 'asc');

        if(isset($params) && !empty($params) && array_key_exists('limit',$params))
        {
            $this->db->limit($params['limit'], $params['offset']);
        }

        //Sempre que se desejar adicionar filtro a uma consulta (model), este snnipet deve ser adicionado
        if (isset($params['filtro'])) {
            $this->tratar_filtro($params['filtro']);
        }

        return $this->db->get('emprestimo')->result_array();
    }

  
    function get_total_emprestimo() {

        $this->db->select_sum('Valor_Emprestimo');
        $objeto = $this->db->get('emprestimo')->row_array();

        return $objeto['Valor_Emprestimo']*1;
    }

    function get_lucro_medio_pct() {

        $this->db->select('AVG((Lucro_Total/Valor_Emprestimo)*100) as Lucro_Medio');
        $objeto = $this->db->get('emprestimo')->row_array();

        return $objeto['Lucro_Medio']*1;
    }

    function get_lucro_total() {

        $this->db->select_sum('Lucro_Total');
        $objeto = $this->db->get('emprestimo')->row_array();

        return $objeto['Lucro_Total']*1;
    }

    function get_total_emprestimo_pendente() {

        $this->db->select_sum('Valor_Emprestimo');
        $this->db->where('Status_Emprestimo','0');
        $objeto = $this->db->get('emprestimo')->row_array();

        return $objeto['Valor_Emprestimo']*1;
    }

    function get_total_emprestimo_restante_corrigido() {

        $this->db->select_sum('Valor_Restante_Corrigido');
        $this->db->where('Status_Emprestimo','0');
        $objeto = $this->db->get('emprestimo')->row_array();

        return $objeto['Valor_Restante_Corrigido']*1;

    }

    function get_total_emprestimo_restante() {

        $this->db->select_sum('Valor_Restante_Emprestimo');
        $this->db->where('Status_Emprestimo','0');
        $objeto = $this->db->get('emprestimo')->row_array();

        return $objeto['Valor_Restante_Emprestimo']*1;

    }
        
    /*
     * function to add new emprestimo
     */
    function add_emprestimo($params)
    {
        $this->db->insert('emprestimo',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update emprestimo
     */
    function update_emprestimo($ID_Emprestimo,$params)
    {
        $this->db->where('ID_Emprestimo',$ID_Emprestimo);
        return $this->db->update('emprestimo',$params);
    }
    
    /*
     * function to delete emprestimo
     */
    function delete_emprestimo($ID_Emprestimo)
    {
        return $this->db->delete('emprestimo',array('ID_Emprestimo'=>$ID_Emprestimo));
    }
}
