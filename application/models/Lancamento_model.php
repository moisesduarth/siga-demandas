<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Lancamento_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }

    /*
     * Get lancamento by ID_Lancamento
     */
    public function get_lancamento($ID_Lancamento)
    {
        $this->db->select('lancamento.*, investidor.*, forma_pagamento.*, users.first_name as Nome_Usuario');
        $this->db->join('investidor', 'investidor.ID_Investidor = lancamento.ID_Cliente_Relacionado', 'left');
        $this->db->join('users', 'users.id = lancamento.ID_User_Update', 'left');
        $this->db->join('forma_pagamento', 'forma_pagamento.ID_Forma_Pagamento = lancamento.ID_Forma_Pagamento', 'join');
        $this->db->where('ID_Lancamento', $ID_Lancamento);

        // Mudando para row_array() para retornar um único registro
        return $this->db->get('lancamento')->row_array();
    }

    function get_lancamentos_por_data($Data_Lancamento = null, $Cidades = null, $ID_User_Create = null)
    {
        $Data_Lancamento = $Data_Lancamento ?: date('Y/m/d');

        $this->db->select('lancamento.*, investidor.*, forma_pagamento.*, users.city, users.first_name as Nome_Usuario');
        $this->db->join('investidor', 'investidor.ID_Investidor = lancamento.ID_Cliente_Relacionado', 'left');
        $this->db->join('users', 'users.id = lancamento.ID_User_Update', 'left');
        $this->db->join('forma_pagamento', 'forma_pagamento.ID_Forma_Pagamento = lancamento.ID_Forma_Pagamento', 'join');
        $this->db->where('DATE_FORMAT(Data_Lancamento, "%d/%m/%Y")', $Data_Lancamento);

        if ($ID_User_Create) {
            $this->db->where('lancamento.ID_User_Create', $ID_User_Create);
        }
        if ($Cidades && count($Cidades) > 0) {
            $this->db->where_in('investidor.Cidade', $Cidades)
                ->or_group_start()
                ->where('investidor.Cidade', null)
                ->where_in('users.city', $Cidades)
                ->group_end();
        }
        $this->db->order_by('MAX(lancamento.ID_Lancamento)', 'desc');  // Função de agregação no ORDER BY
        return $this->db->get('lancamento')->result_array();
    }

    /*
     * Get all lancamento
     */
    function get_all_lancamento($Data_Lancamento = null, $Cidades = null, $Nome_Usuario = null)
    {
        $this->db->select('lancamento.*, investidor.*, forma_pagamento.*, users.city, users.first_name as Nome_Usuario');
        $this->db->join('investidor', 'investidor.ID_Investidor = lancamento.ID_Cliente_Relacionado', 'left');
        $this->db->join('users', 'users.id = lancamento.ID_User_Create', 'left');
        $this->db->join('forma_pagamento', 'forma_pagamento.ID_Forma_Pagamento = lancamento.ID_Forma_Pagamento', 'join');

        // Aplica filtro de Data_Lancamento apenas se for especificado
        if (!empty($Data_Lancamento)) {
            $this->db->where('DATE_FORMAT(Data_Lancamento, "%d/%m/%Y")', $Data_Lancamento);
        }

        // Filtro para Nome_Usuario, se especificado
        if ($Nome_Usuario) {
            $this->db->where("users.first_name LIKE '%$Nome_Usuario%'");
        }

        // Filtro para Cidades, se especificado
        if (is_array($Cidades) && count($Cidades) > 0) {
            $this->db->where_in('investidor.Cidade', $Cidades)
                ->or_group_start()
                ->where('investidor.Cidade', NULL)
                ->where_in('users.city', $Cidades)
                ->group_end();
        }

        $this->db->order_by('ID_Lancamento', 'desc');
        return $this->db->get('lancamento')->result_array();
    }


    public function get_all_lancamento_by_forma_pagamento($tipo_lancamento = '1', $Data_Lancamento = null, $Cidades = null, $ID_User_Create = null)
    {
        $Data_Lancamento = $Data_Lancamento ?: date('Y/m/d');

        $this->db->select('forma_pagamento.ID_Forma_Pagamento, forma_pagamento.Descricao_Forma_Pagamento, SUM(Valor_Lancamento) as Valor_Lancamento');
        $this->db->join('investidor', 'investidor.ID_Investidor = lancamento.ID_Cliente_Relacionado', 'left');
        $this->db->join('users', 'users.id = lancamento.ID_User_Update', 'left');
        $this->db->join('forma_pagamento', 'forma_pagamento.ID_Forma_Pagamento = lancamento.ID_Forma_Pagamento', 'join');
        $this->db->where('lancamento.Tipo_Lancamento', $tipo_lancamento);
        $this->db->where('DATE_FORMAT(Data_Lancamento, "%d/%m/%Y") =', $Data_Lancamento);

        if ($ID_User_Create) {
            $this->db->where('lancamento.ID_User_Create', $ID_User_Create);
        }
        if (is_array($Cidades) && count($Cidades) > 0) {
            $this->db->where_in('investidor.Cidade', $Cidades);
        }

        // Correção no 'GROUP BY' e 'ORDER BY'
        $this->db->group_by('forma_pagamento.ID_Forma_Pagamento');
        $this->db->order_by('forma_pagamento.ID_Forma_Pagamento', 'asc');

        return $this->db->get('lancamento')->result_array();
    }


    /*
     * function to add new lancamento
     */
    function add_lancamento($params)
    {
        $this->db->insert('lancamento', $params);
        return $this->db->insert_id();
    }

    /*
     * function to update lancamento
     */
    function update_lancamento($ID_Lancamento, $params)
    {
        $this->db->where('ID_Lancamento', $ID_Lancamento);
        return $this->db->update('lancamento', $params);
    }

    /*
     * function to delete lancamento
     */
    function delete_lancamento($ID_Lancamento)
    {
        return $this->db->delete('lancamento', array('ID_Lancamento' => $ID_Lancamento));
    }
}
